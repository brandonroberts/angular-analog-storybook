{
  "version": 3,
  "sources": ["../../../../node_modules/core-js/modules/es.string.split.js"],
  "sourcesContent": ["'use strict';\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar arraySlice = require('../internals/array-slice-simple');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IACIA,OACAC,MACAC,aACAC,+BACAC,UACAC,UACAC,wBACAC,oBACAC,oBACAC,UACAC,UACAC,WACAC,YACAC,gBACAC,YACAC,eACAC,OAEAC,eACAC,YACAC,KACAC,OACAC,MACAC,MACAC,aAIAC;AA7BJ;;;;AACA,IAAIxB,QAAQyB;AACZ,IAAIxB,OAAOwB;AACX,IAAIvB,cAAcuB;AAClB,IAAItB,gCAAgCsB;AACpC,IAAIrB,WAAWqB;AACf,IAAIpB,WAAWoB;AACf,IAAInB,yBAAyBmB;AAC7B,IAAIlB,qBAAqBkB;AACzB,IAAIjB,qBAAqBiB;AACzB,IAAIhB,WAAWgB;AACf,IAAIf,WAAWe;AACf,IAAId,YAAYc;AAChB,IAAIb,aAAaa;AACjB,IAAIZ,iBAAiBY;AACrB,IAAIX,aAAaW;AACjB,IAAIV,gBAAgBU;AACpB,IAAIT,QAAQS;AAEZ,IAAIR,gBAAgBF,cAAcE;AAClC,IAAIC,aAAa;AACjB,IAAIC,MAAMO,KAAKP;AACf,IAAIC,QAAQ,CAAA,EAAGE;AACf,IAAID,OAAOnB,YAAY,IAAImB,IAAL;AACtB,IAAIC,OAAOpB,YAAYkB,KAAD;AACtB,IAAIG,cAAcrB,YAAY,GAAGyB,KAAJ;AAI7B,IAAIH,oCAAoC,CAACR,MAAM,WAAY;AAEzD,UAAIY,KAAK;AACT,UAAIC,eAAeD,GAAGP;AACtBO,SAAGP,OAAO,WAAY;AAAE,eAAOQ,aAAa7B,MAAM,MAAM8B,SAAzB;MAAsC;AACrE,UAAIC,SAAS,KAAKC,MAAMJ,EAAX;AACb,aAAOG,OAAOE,WAAW,KAAKF,OAAO,OAAO,OAAOA,OAAO,OAAO;IAClE,CAP6C;AAU9C5B,kCAA8B,SAAS,SAAU+B,OAAOC,aAAaC,iBAAiB;AACpF,UAAIC;AACJ,UACE,OAAOL,MAAM,MAAb,EAAqB,MAAM,OAE3B,OAAOA,MAAM,QAAQ,EAArB,EAAyBC,UAAU,KACnC,KAAKD,MAAM,SAAX,EAAsBC,UAAU,KAChC,IAAID,MAAM,UAAV,EAAsBC,UAAU,KAEhC,IAAID,MAAM,MAAV,EAAkBC,SAAS,KAC3B,GAAGD,MAAM,IAAT,EAAeC,QACf;AAEAI,wBAAgB,SAAUC,WAAWC,OAAO;AAC1C,cAAIC,SAAS9B,SAASJ,uBAAuB,IAAD,CAAvB;AACrB,cAAImC,MAAMF,UAAUG,SAAYxB,aAAaqB,UAAU;AACvD,cAAIE,QAAQ;AAAG,mBAAO,CAAA;AACtB,cAAIH,cAAcI;AAAW,mBAAO,CAACF,MAAD;AAEpC,cAAI,CAACpC,SAASkC,SAAD,GAAa;AACxB,mBAAOrC,KAAKkC,aAAaK,QAAQF,WAAWG,GAAjC;UACZ;AACD,cAAIE,SAAS,CAAA;AACb,cAAIC,SAASN,UAAUO,aAAa,MAAM,OAC7BP,UAAUQ,YAAY,MAAM,OAC5BR,UAAUS,UAAU,MAAM,OAC1BT,UAAUU,SAAS,MAAM;AACtC,cAAIC,gBAAgB;AAEpB,cAAIC,gBAAgB,IAAIC,OAAOb,UAAUc,QAAQR,QAAQ,GAArC;AACpB,cAAIS,OAAOC,WAAWC;AACtB,iBAAOF,QAAQpD,KAAKa,YAAYoC,eAAeV,MAA5B,GAAqC;AACtDc,wBAAYJ,cAAcI;AAC1B,gBAAIA,YAAYL,eAAe;AAC7B3B,mBAAKqB,QAAQpB,YAAYiB,QAAQS,eAAeI,MAAMG,KAA9B,CAApB;AACJ,kBAAIH,MAAMpB,SAAS,KAAKoB,MAAMG,QAAQhB,OAAOP;AAAQjC,sBAAMoB,OAAOuB,QAAQ/B,WAAWyC,OAAO,CAAR,CAA1B;AAC1DE,2BAAaF,MAAM,GAAGpB;AACtBgB,8BAAgBK;AAChB,kBAAIX,OAAOV,UAAUQ;AAAK;YAC3B;AACD,gBAAIS,cAAcI,cAAcD,MAAMG;AAAON,4BAAcI;UAC5D;AACD,cAAIL,kBAAkBT,OAAOP,QAAQ;AACnC,gBAAIsB,cAAc,CAAClC,KAAK6B,eAAe,EAAhB;AAAqB5B,mBAAKqB,QAAQ,EAAT;UACjD;AAAMrB,iBAAKqB,QAAQpB,YAAYiB,QAAQS,aAAT,CAApB;AACX,iBAAON,OAAOV,SAASQ,MAAM7B,WAAW+B,QAAQ,GAAGF,GAAZ,IAAmBE;QAC3D;MAEF,WAAU,IAAIX,MAAMU,QAAW,CAArB,EAAwBT,QAAQ;AACzCI,wBAAgB,SAAUC,WAAWC,OAAO;AAC1C,iBAAOD,cAAcI,UAAaH,UAAU,IAAI,CAAA,IAAKtC,KAAKkC,aAAa,MAAMG,WAAWC,KAA/B;QAC1D;MACF;AAAMF,wBAAgBF;AAEvB,aAAO;QAGL,SAASH,MAAMM,WAAWC,OAAO;AAC/B,cAAIkB,IAAInD,uBAAuB,IAAD;AAC9B,cAAIoD,WAAWpB,aAAaI,SAAYA,SAAY/B,UAAU2B,WAAWJ,KAAZ;AAC7D,iBAAOwB,WACHzD,KAAKyD,UAAUpB,WAAWmB,GAAGlB,KAAzB,IACJtC,KAAKoC,eAAe3B,SAAS+C,CAAD,GAAKnB,WAAWC,KAAxC;QACT;QAMD,SAAUC,QAAQD,OAAO;AACvB,cAAIoB,KAAKtD,SAAS,IAAD;AACjB,cAAIuD,IAAIlD,SAAS8B,MAAD;AAChB,cAAIqB,MAAMzB,gBAAgBC,eAAesB,IAAIC,GAAGrB,OAAOF,kBAAkBF,WAAhD;AAEzB,cAAI0B,IAAIC;AAAM,mBAAOD,IAAIE;AAEzB,cAAIC,IAAIzD,mBAAmBoD,IAAIR,MAAL;AAE1B,cAAIc,kBAAkBN,GAAGZ;AACzB,cAAIH,SAASe,GAAGd,aAAa,MAAM,OACtBc,GAAGb,YAAY,MAAM,OACrBa,GAAGZ,UAAU,MAAM,OACnB9B,gBAAgB,MAAM;AAInC,cAAIyC,WAAW,IAAIM,EAAE/C,gBAAgB,SAAS0C,GAAGP,SAAS,MAAMO,IAAIf,KAArD;AACf,cAAIH,MAAMF,UAAUG,SAAYxB,aAAaqB,UAAU;AACvD,cAAIE,QAAQ;AAAG,mBAAO,CAAA;AACtB,cAAImB,EAAE3B,WAAW;AAAG,mBAAOpB,eAAe6C,UAAUE,CAAX,MAAkB,OAAO,CAACA,CAAD,IAAM,CAAA;AACxE,cAAIM,IAAI;AACR,cAAIC,IAAI;AACR,cAAIC,IAAI,CAAA;AACR,iBAAOD,IAAIP,EAAE3B,QAAQ;AACnByB,qBAASJ,YAAYrC,gBAAgB,IAAIkD;AACzC,gBAAIE,IAAIxD,eAAe6C,UAAUzC,gBAAgBM,YAAYqC,GAAGO,CAAJ,IAASP,CAA/C;AACtB,gBAAIU;AACJ,gBACED,MAAM,SACLC,IAAInD,IAAIV,SAASiD,SAASJ,aAAarC,gBAAgBkD,IAAI,EAA3C,GAAgDP,EAAE3B,MAA3D,OAAwEiC,GAChF;AACAC,kBAAI3D,mBAAmBoD,GAAGO,GAAGF,eAAP;YACvB,OAAM;AACL3C,mBAAK8C,GAAG7C,YAAYqC,GAAGM,GAAGC,CAAP,CAAf;AACJ,kBAAIC,EAAEnC,WAAWQ;AAAK,uBAAO2B;AAC7B,uBAASG,IAAI,GAAGA,KAAKF,EAAEpC,SAAS,GAAGsC,KAAK;AACtCjD,qBAAK8C,GAAGC,EAAEE,EAAN;AACJ,oBAAIH,EAAEnC,WAAWQ;AAAK,yBAAO2B;cAC9B;AACDD,kBAAID,IAAII;YACT;UACF;AACDhD,eAAK8C,GAAG7C,YAAYqC,GAAGM,CAAJ,CAAf;AACJ,iBAAOE;QACR;MA5DI;IA8DR,GAAE,CAAC5C,mCAAmCP,aApHV;;;",
  "names": ["apply", "call", "uncurryThis", "fixRegExpWellKnownSymbolLogic", "isRegExp", "anObject", "requireObjectCoercible", "speciesConstructor", "advanceStringIndex", "toLength", "toString", "getMethod", "arraySlice", "callRegExpExec", "regexpExec", "stickyHelpers", "fails", "UNSUPPORTED_Y", "MAX_UINT32", "min", "$push", "exec", "push", "stringSlice", "SPLIT_WORKS_WITH_OVERWRITTEN_EXEC", "require", "Math", "slice", "re", "originalExec", "arguments", "result", "split", "length", "SPLIT", "nativeSplit", "maybeCallNative", "internalSplit", "separator", "limit", "string", "lim", "undefined", "output", "flags", "ignoreCase", "multiline", "unicode", "sticky", "lastLastIndex", "separatorCopy", "RegExp", "source", "match", "lastIndex", "lastLength", "index", "O", "splitter", "rx", "S", "res", "done", "value", "C", "unicodeMatching", "p", "q", "A", "z", "e", "i"]
}

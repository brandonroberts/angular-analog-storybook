{
  "version": 3,
  "sources": ["../../../../node_modules/core-js/internals/string-repeat.js", "../../../../node_modules/core-js/modules/es.number.to-fixed.js"],
  "sourcesContent": ["'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $RangeError = RangeError;\n\n// `String.prototype.repeat` method implementation\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\nmodule.exports = function repeat(count) {\n  var str = toString(requireObjectCoercible(this));\n  var result = '';\n  var n = toIntegerOrInfinity(count);\n  if (n < 0 || n == Infinity) throw $RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar thisNumberValue = require('../internals/this-number-value');\nvar $repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar $RangeError = RangeError;\nvar $String = String;\nvar floor = Math.floor;\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice);\nvar un$ToFixed = uncurryThis(1.0.toFixed);\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar multiply = function (data, n, c) {\n  var index = -1;\n  var c2 = c;\n  while (++index < 6) {\n    c2 += n * data[index];\n    data[index] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\n\nvar divide = function (data, n) {\n  var index = 6;\n  var c = 0;\n  while (--index >= 0) {\n    c += data[index];\n    data[index] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\n\nvar dataToString = function (data) {\n  var index = 6;\n  var s = '';\n  while (--index >= 0) {\n    if (s !== '' || index === 0 || data[index] !== 0) {\n      var t = $String(data[index]);\n      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;\n    }\n  } return s;\n};\n\nvar FORCED = fails(function () {\n  return un$ToFixed(0.00008, 3) !== '0.000' ||\n    un$ToFixed(0.9, 0) !== '1' ||\n    un$ToFixed(1.255, 2) !== '1.25' ||\n    un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';\n}) || !fails(function () {\n  // V8 ~ Android 4.3-\n  un$ToFixed({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.es/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toIntegerOrInfinity(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n    if (fractDigits < 0 || fractDigits > 20) throw $RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return $String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(data, 0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(data, 1e7, 0);\n          j -= 7;\n        }\n        multiply(data, pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(data, 1 << 23);\n          j -= 23;\n        }\n        divide(data, 1 << j);\n        multiply(data, 1, 1);\n        divide(data, 2);\n        result = dataToString(data);\n      } else {\n        multiply(data, 0, z);\n        multiply(data, 1 << -e, 0);\n        result = dataToString(data) + repeat('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat('0', fractDigits - k) + result\n        : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n"],
  "mappings": "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",
  "names": ["toIntegerOrInfinity", "require", "toString", "requireObjectCoercible", "$RangeError", "RangeError", "module", "exports", "repeat", "count", "str", "result", "n", "Infinity", "$", "require", "uncurryThis", "toIntegerOrInfinity", "thisNumberValue", "$repeat", "fails", "$RangeError", "RangeError", "$String", "String", "floor", "Math", "repeat", "stringSlice", "slice", "un$ToFixed", "toFixed", "pow", "x", "n", "acc", "log", "x2", "multiply", "data", "c", "index", "c2", "divide", "dataToString", "s", "t", "length", "FORCED", "target", "proto", "forced", "fractionDigits", "number", "fractDigits", "sign", "result", "e", "z", "j", "k"]
}

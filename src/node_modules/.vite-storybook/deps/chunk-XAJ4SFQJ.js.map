{
  "version": 3,
  "sources": ["../../../../node_modules/ts-dedent/esm/index.js"],
  "sourcesContent": ["export function dedent(templ) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    var strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n    strings[strings.length - 1] = strings[strings.length - 1].replace(/\\r?\\n([\\t ]*)$/, '');\n    var indentLengths = strings.reduce(function (arr, str) {\n        var matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n        if (matches) {\n            return arr.concat(matches.map(function (match) { var _a, _b; return (_b = (_a = match.match(/[\\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }));\n        }\n        return arr;\n    }, []);\n    if (indentLengths.length) {\n        var pattern_1 = new RegExp(\"\\n[\\t ]{\" + Math.min.apply(Math, indentLengths) + \"}\", 'g');\n        strings = strings.map(function (str) { return str.replace(pattern_1, '\\n'); });\n    }\n    strings[0] = strings[0].replace(/^\\r?\\n/, '');\n    var string = strings[0];\n    values.forEach(function (value, i) {\n        var endentations = string.match(/(?:^|\\n)( *)$/);\n        var endentation = endentations ? endentations[1] : '';\n        var indentedValue = value;\n        if (typeof value === 'string' && value.includes('\\n')) {\n            indentedValue = String(value)\n                .split('\\n')\n                .map(function (str, i) {\n                return i === 0 ? str : \"\" + endentation + str;\n            })\n                .join('\\n');\n        }\n        string += indentedValue + strings[i + 1];\n    });\n    return string;\n}\nexport default dedent;\n//# sourceMappingURL=index.js.map"],
  "mappings": ";;;;;;;AAAA;;;;;AAAO,SAASA,OAAOC,OAAO;AAC1B,MAAIC,SAAS,CAAA;AACb,WAASC,KAAK,GAAGA,KAAKC,UAAUC,QAAQF,MAAM;AAC1CD,WAAOC,KAAK,KAAKC,UAAUD;EAC9B;AACD,MAAIG,UAAUC,MAAMC,KAAK,OAAOP,UAAU,WAAW,CAACA,KAAD,IAAUA,KAAjD;AACdK,UAAQA,QAAQD,SAAS,KAAKC,QAAQA,QAAQD,SAAS,GAAGI,QAAQ,kBAAkB,EAAtD;AAC9B,MAAIC,gBAAgBJ,QAAQK,OAAO,SAAUC,KAAKC,KAAK;AACnD,QAAIC,UAAUD,IAAIE,MAAM,qBAAV;AACd,QAAID,SAAS;AACT,aAAOF,IAAII,OAAOF,QAAQG,IAAI,SAAUF,OAAO;AAAE,YAAIG,IAAIC;AAAI,gBAAQA,MAAMD,KAAKH,MAAMA,MAAM,QAAZ,OAA2B,QAAQG,OAAO,SAAS,SAASA,GAAGb,YAAY,QAAQc,OAAO,SAASA,KAAK;MAAI,CAA1K,CAAX;IACV;AACD,WAAOP;EACV,GAAE,CAAA,CANiB;AAOpB,MAAIF,cAAcL,QAAQ;AACtB,QAAIe,YAAY,IAAIC,OAAO,YAAaC,KAAKC,IAAIC,MAAMF,MAAMZ,aAArB,IAAsC,KAAK,GAAnE;AAChBJ,cAAUA,QAAQW,IAAI,SAAUJ,KAAK;AAAE,aAAOA,IAAIJ,QAAQW,WAAW,IAAvB;IAA+B,CAAnE;EACb;AACDd,UAAQ,KAAKA,QAAQ,GAAGG,QAAQ,UAAU,EAA7B;AACb,MAAIgB,SAASnB,QAAQ;AACrBJ,SAAOwB,QAAQ,SAAUC,OAAOC,GAAG;AAC/B,QAAIC,eAAeJ,OAAOV,MAAM,eAAb;AACnB,QAAIe,cAAcD,eAAeA,aAAa,KAAK;AACnD,QAAIE,gBAAgBJ;AACpB,QAAI,OAAOA,UAAU,YAAYA,MAAMK,SAAS,IAAf,GAAsB;AACnDD,sBAAgBE,OAAON,KAAD,EACjBO,MAAM,IADK,EAEXjB,IAAI,SAAUJ,KAAKe,IAAG;AACvB,eAAOA,OAAM,IAAIf,MAAM,KAAKiB,cAAcjB;MAC7C,CAJe,EAKXsB,KAAK,IALM;IAMnB;AACDV,cAAUM,gBAAgBzB,QAAQsB,IAAI;EACzC,CAbD;AAcA,SAAOH;AACV;AAnCD,IAoCA;AApCA;;;AAoCA,IAAA,cAAezB;;;",
  "names": ["dedent", "templ", "values", "_i", "arguments", "length", "strings", "Array", "from", "replace", "indentLengths", "reduce", "arr", "str", "matches", "match", "concat", "map", "_a", "_b", "pattern_1", "RegExp", "Math", "min", "apply", "string", "forEach", "value", "i", "endentations", "endentation", "indentedValue", "includes", "String", "split", "join"]
}

{
  "version": 3,
  "sources": ["../../../../node_modules/estraverse/estraverse.js", "dep:estraverse"],
  "sourcesContent": ["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n    'use strict';\n\n    var Syntax,\n        VisitorOption,\n        VisitorKeys,\n        BREAK,\n        SKIP,\n        REMOVE;\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ChainExpression: 'ChainExpression',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportExpression: 'ImportExpression',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        ModuleSpecifier: 'ModuleSpecifier',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        PrivateIdentifier: 'PrivateIdentifier',\n        Program: 'Program',\n        Property: 'Property',\n        PropertyDefinition: 'PropertyDefinition',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ChainExpression: ['expression'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportExpression: ['source'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MetaProperty: ['meta', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        PrivateIdentifier: [],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        PropertyDefinition: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (Array.isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return type of current node\n    Controller.prototype.type = function () {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    // API:\n    // remove node\n    Controller.prototype.remove = function () {\n        this.notify(REMOVE);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === 'iteration') {\n            this.__fallback = Object.keys;\n        } else if (typeof visitor.fallback === 'function') {\n            this.__fallback = visitor.fallback;\n        }\n\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n        }\n    };\n\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === 'object' && typeof node.type === 'string';\n    }\n\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n    }\n  \n    function candidateExistsInLeaveList(leavelist, candidate) {\n        for (var i = leavelist.length - 1; i >= 0; --i) {\n            if (leavelist[i].node === candidate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error('Unknown node type ' + nodeType + '.');\n                    }\n                }\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while ((current2 -= 1) >= 0) {\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n\n                            if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\n                              continue;\n                            }\n\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [key, current2], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        if (candidateExistsInLeaveList(leavelist, candidate)) {\n                          continue;\n                        }\n\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        function removeElem(element) {\n            var i,\n                key,\n                nextElem,\n                parent;\n\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while (i--) {\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if  (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error('Unknown node type ' + nodeType + '.');\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n    exports.cloneEnvironment = function () { return clone({}); };\n\n    return exports;\n}(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n", "export default require(\"../node_modules/estraverse/estraverse.js\");"],
  "mappings": "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",
  "names": ["clone", "exports", "Syntax", "VisitorOption", "VisitorKeys", "BREAK", "SKIP", "REMOVE", "deepCopy", "obj", "ret", "key", "val", "hasOwnProperty", "upperBound", "array", "func", "diff", "len", "i", "current", "length", "AssignmentExpression", "AssignmentPattern", "ArrayExpression", "ArrayPattern", "ArrowFunctionExpression", "AwaitExpression", "BlockStatement", "BinaryExpression", "BreakStatement", "CallExpression", "CatchClause", "ChainExpression", "ClassBody", "ClassDeclaration", "ClassExpression", "ComprehensionBlock", "ComprehensionExpression", "ConditionalExpression", "ContinueStatement", "DebuggerStatement", "DirectiveStatement", "DoWhileStatement", "EmptyStatement", "ExportAllDeclaration", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExportSpecifier", "ExpressionStatement", "ForStatement", "ForInStatement", "ForOfStatement", "FunctionDeclaration", "FunctionExpression", "GeneratorExpression", "Identifier", "IfStatement", "ImportExpression", "ImportDeclaration", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ImportSpecifier", "Literal", "LabeledStatement", "LogicalExpression", "MemberExpression", "MetaProperty", "MethodDefinition", "ModuleSpecifier", "NewExpression", "ObjectExpression", "ObjectPattern", "PrivateIdentifier", "Program", "Property", "PropertyDefinition", "RestElement", "ReturnStatement", "SequenceExpression", "SpreadElement", "Super", "SwitchStatement", "SwitchCase", "TaggedTemplateExpression", "TemplateElement", "TemplateLiteral", "ThisExpression", "ThrowStatement", "TryStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarator", "WhileStatement", "WithStatement", "YieldExpression", "Break", "Skip", "Remove", "Reference", "parent", "prototype", "replace", "node", "remove", "Array", "isArray", "splice", "Element", "path", "wrap", "ref", "Controller", "iz", "j", "jz", "result", "element", "addToPath", "push", "__current", "__leavelist", "type", "parents", "__execute", "callback", "previous", "undefined", "__state", "call", "notify", "flag", "skip", "__initialize", "root", "visitor", "__worklist", "__fallback", "fallback", "Object", "keys", "__keys", "assign", "create", "isNode", "isProperty", "nodeType", "candidateExistsInLeaveList", "leavelist", "candidate", "traverse", "worklist", "current2", "candidates", "sentinel", "pop", "leave", "enter", "Error", "target", "outer", "removeElem", "nextElem", "controller", "extendCommentRange", "comment", "tokens", "search", "token", "range", "extendedRange", "attachComments", "tree", "providedComments", "comments", "cursor", "leadingComments", "trailingComments", "cloneEnvironment"]
}

{
  "version": 3,
  "sources": ["../../../../node_modules/stable/stable.js"],
  "sourcesContent": ["//! stable.js 0.1.8, https://github.com/Two-Screen/stable\n//! \u00A9 2018 Angry Bytes and contributors. MIT licensed.\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.stable = factory());\n}(this, (function () { 'use strict';\n\n  // A stable array sort, because `Array#sort()` is not guaranteed stable.\n  // This is an implementation of merge sort, without recursion.\n\n  var stable = function (arr, comp) {\n    return exec(arr.slice(), comp)\n  };\n\n  stable.inplace = function (arr, comp) {\n    var result = exec(arr, comp);\n\n    // This simply copies back if the result isn't in the original array,\n    // which happens on an odd number of passes.\n    if (result !== arr) {\n      pass(result, null, arr.length, arr);\n    }\n\n    return arr\n  };\n\n  // Execute the sort using the input array and a second buffer as work space.\n  // Returns one of those two, containing the final result.\n  function exec(arr, comp) {\n    if (typeof(comp) !== 'function') {\n      comp = function (a, b) {\n        return String(a).localeCompare(b)\n      };\n    }\n\n    // Short-circuit when there's nothing to sort.\n    var len = arr.length;\n    if (len <= 1) {\n      return arr\n    }\n\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n    // Chunks are the size of the left or right hand in merge sort.\n    // Stop when the left-hand covers all of the array.\n    var buffer = new Array(len);\n    for (var chk = 1; chk < len; chk *= 2) {\n      pass(arr, comp, chk, buffer);\n\n      var tmp = arr;\n      arr = buffer;\n      buffer = tmp;\n    }\n\n    return arr\n  }\n\n  // Run a single pass with the given chunk size.\n  var pass = function (arr, comp, chk, result) {\n    var len = arr.length;\n    var i = 0;\n    // Step size / double chunk size.\n    var dbl = chk * 2;\n    // Bounds of the left and right chunks.\n    var l, r, e;\n    // Iterators over the left and right chunk.\n    var li, ri;\n\n    // Iterate over pairs of chunks.\n    for (l = 0; l < len; l += dbl) {\n      r = l + chk;\n      e = r + chk;\n      if (r > len) r = len;\n      if (e > len) e = len;\n\n      // Iterate both chunks in parallel.\n      li = l;\n      ri = r;\n      while (true) {\n        // Compare the chunks.\n        if (li < r && ri < e) {\n          // This works for a regular `sort()` compatible comparator,\n          // but also for a simple comparator like: `a > b`\n          if (comp(arr[li], arr[ri]) <= 0) {\n            result[i++] = arr[li++];\n          }\n          else {\n            result[i++] = arr[ri++];\n          }\n        }\n        // Nothing to compare, just flush what's left.\n        else if (li < r) {\n          result[i++] = arr[li++];\n        }\n        else if (ri < e) {\n          result[i++] = arr[ri++];\n        }\n        // Both iterators are at the chunk ends.\n        else {\n          break\n        }\n      }\n    }\n  };\n\n  return stable;\n\n})));\n"],
  "mappings": ";;;;;;AAAA;;;AAGC,KAAA,SAAUA,QAAQC,SAAS;AAC1B,aAAOC,YAAY,YAAY,OAAOC,WAAW,cAAcA,OAAOD,UAAUD,QAAO,IACvF,OAAOG,WAAW,cAAcA,OAAOC,MAAMD,OAAOH,OAAD,IAClDD,OAAOM,SAASL,QAAO;IACzB,GAAC,SAAO,WAAY;AAAE;AAKrB,UAAIK,SAAS,SAAUC,KAAKC,MAAM;AAChC,eAAOC,KAAKF,IAAIG,MAAJ,GAAaF,IAAd;MACZ;AAEDF,aAAOK,UAAU,SAAUJ,KAAKC,MAAM;AACpC,YAAII,SAASH,KAAKF,KAAKC,IAAN;AAIjB,YAAII,WAAWL,KAAK;AAClBM,eAAKD,QAAQ,MAAML,IAAIO,QAAQP,GAA3B;QACL;AAED,eAAOA;MACR;AAID,eAASE,KAAKF,KAAKC,MAAM;AACvB,YAAI,OAAOA,SAAU,YAAY;AAC/BA,iBAAO,SAAUO,GAAGC,GAAG;AACrB,mBAAOC,OAAOF,CAAD,EAAIG,cAAcF,CAAxB;UACR;QACF;AAGD,YAAIG,MAAMZ,IAAIO;AACd,YAAIK,OAAO,GAAG;AACZ,iBAAOZ;QACR;AAKD,YAAIa,SAAS,IAAIC,MAAMF,GAAV;AACb,iBAASG,MAAM,GAAGA,MAAMH,KAAKG,OAAO,GAAG;AACrCT,eAAKN,KAAKC,MAAMc,KAAKF,MAAjB;AAEJ,cAAIG,MAAMhB;AACVA,gBAAMa;AACNA,mBAASG;QACV;AAED,eAAOhB;MACR;AAGD,UAAIM,OAAO,SAAUN,KAAKC,MAAMc,KAAKV,QAAQ;AAC3C,YAAIO,MAAMZ,IAAIO;AACd,YAAIU,IAAI;AAER,YAAIC,MAAMH,MAAM;AAEhB,YAAII,GAAGC,GAAGC;AAEV,YAAIC,IAAIC;AAGR,aAAKJ,IAAI,GAAGA,IAAIP,KAAKO,KAAKD,KAAK;AAC7BE,cAAID,IAAIJ;AACRM,cAAID,IAAIL;AACR,cAAIK,IAAIR;AAAKQ,gBAAIR;AACjB,cAAIS,IAAIT;AAAKS,gBAAIT;AAGjBU,eAAKH;AACLI,eAAKH;AACL,iBAAO,MAAM;AAEX,gBAAIE,KAAKF,KAAKG,KAAKF,GAAG;AAGpB,kBAAIpB,KAAKD,IAAIsB,KAAKtB,IAAIuB,GAAd,KAAsB,GAAG;AAC/BlB,uBAAOY,OAAOjB,IAAIsB;cACnB,OACI;AACHjB,uBAAOY,OAAOjB,IAAIuB;cACnB;YACF,WAEQD,KAAKF,GAAG;AACff,qBAAOY,OAAOjB,IAAIsB;YACnB,WACQC,KAAKF,GAAG;AACfhB,qBAAOY,OAAOjB,IAAIuB;YACnB,OAEI;AACH;YACD;UACF;QACF;MACF;AAED,aAAOxB;IAER,CAzGA;;;",
  "names": ["global", "factory", "exports", "module", "define", "amd", "stable", "arr", "comp", "exec", "slice", "inplace", "result", "pass", "length", "a", "b", "String", "localeCompare", "len", "buffer", "Array", "chk", "tmp", "i", "dbl", "l", "r", "e", "li", "ri"]
}

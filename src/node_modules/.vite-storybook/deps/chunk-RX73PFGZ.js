import {
  init_es_number_is_nan
} from "./chunk-6FYGJW3W.js";
import {
  require_doctrine
} from "./chunk-QEU5N7GB.js";
import {
  combineParameters,
  init_esm
} from "./chunk-KTUVAV7V.js";
import {
  init_es_array_join
} from "./chunk-LPLROBCZ.js";
import {
  init_es_string_split
} from "./chunk-PRKSDZJ7.js";
import {
  require_mapValues
} from "./chunk-6Z2FEXTT.js";
import {
  init_es_number_constructor
} from "./chunk-JFKL56PB.js";
import {
  init_es_array_includes,
  init_es_array_map,
  init_es_function_name,
  init_es_object_assign,
  init_es_string_includes,
  init_es_symbol,
  init_es_symbol_description
} from "./chunk-OPAZLAKG.js";
import {
  init_es_array_filter
} from "./chunk-VYLTT7BA.js";
import {
  init_es_object_keys,
  init_web_dom_collections_for_each
} from "./chunk-BNKHNS7O.js";
import {
  init_es_array_concat,
  init_es_string_replace,
  require_es_regexp_exec
} from "./chunk-WDY4P2NX.js";
import {
  require_es_object_to_string
} from "./chunk-IPK6NK5O.js";
import {
  __esm,
  __export,
  __toESM,
  init_define_ngDevMode
} from "./chunk-XN7ES5DP.js";

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/string.js
var str;
var init_string = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/string.js"() {
    init_define_ngDevMode();
    str = function str2(obj) {
      if (!obj) {
        return "";
      }
      if (typeof obj === "string") {
        return obj;
      }
      throw new Error("Description: expected string, got: ".concat(JSON.stringify(obj)));
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/convert.js
var import_es_object_to_string, convertSig, convert;
var init_convert = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/convert.js"() {
    init_define_ngDevMode();
    import_es_object_to_string = __toESM(require_es_object_to_string());
    init_web_dom_collections_for_each();
    init_es_function_name();
    init_es_object_assign();
    init_es_array_map();
    convertSig = function convertSig2(type) {
      switch (type.type) {
        case "function":
          return {
            name: "function"
          };
        case "object":
          var values = {};
          type.signature.properties.forEach(function(prop) {
            values[prop.key] = convert(prop.value);
          });
          return {
            name: "object",
            value: values
          };
        default:
          throw new Error("Unknown: ".concat(type));
      }
    };
    convert = function convert2(type) {
      var name = type.name, raw = type.raw;
      var base = {};
      if (typeof raw !== "undefined")
        base.raw = raw;
      switch (type.name) {
        case "string":
        case "number":
        case "symbol":
        case "boolean": {
          return Object.assign({}, base, {
            name
          });
        }
        case "Array": {
          return Object.assign({}, base, {
            name: "array",
            value: type.elements.map(convert2)
          });
        }
        case "signature":
          return Object.assign({}, base, convertSig(type));
        case "union":
        case "intersection":
          return Object.assign({}, base, {
            name,
            value: type.elements.map(convert2)
          });
        default:
          return Object.assign({}, base, {
            name: "other",
            value: name
          });
      }
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/types.js
var init_types = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/types.js"() {
    init_define_ngDevMode();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/index.js
var init_typescript = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/typescript/index.js"() {
    init_define_ngDevMode();
    init_convert();
    init_types();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/convert.js
var import_es_regexp_exec, import_es_object_to_string2, isLiteral, toEnumOption, convertSig3, convert3;
var init_convert2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/convert.js"() {
    init_define_ngDevMode();
    init_es_function_name();
    import_es_regexp_exec = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    import_es_object_to_string2 = __toESM(require_es_object_to_string());
    init_web_dom_collections_for_each();
    init_es_object_assign();
    init_es_array_map();
    isLiteral = function isLiteral2(type) {
      return type.name === "literal";
    };
    toEnumOption = function toEnumOption2(element) {
      return element.value.replace(/['|"]/g, "");
    };
    convertSig3 = function convertSig4(type) {
      switch (type.type) {
        case "function":
          return {
            name: "function"
          };
        case "object":
          var values = {};
          type.signature.properties.forEach(function(prop) {
            values[prop.key] = convert3(prop.value);
          });
          return {
            name: "object",
            value: values
          };
        default:
          throw new Error("Unknown: ".concat(type));
      }
    };
    convert3 = function convert4(type) {
      var name = type.name, raw = type.raw;
      var base = {};
      if (typeof raw !== "undefined")
        base.raw = raw;
      switch (type.name) {
        case "literal":
          return Object.assign({}, base, {
            name: "other",
            value: type.value
          });
        case "string":
        case "number":
        case "symbol":
        case "boolean": {
          return Object.assign({}, base, {
            name
          });
        }
        case "Array": {
          return Object.assign({}, base, {
            name: "array",
            value: type.elements.map(convert4)
          });
        }
        case "signature":
          return Object.assign({}, base, convertSig3(type));
        case "union":
          if (type.elements.every(isLiteral)) {
            return Object.assign({}, base, {
              name: "enum",
              value: type.elements.map(toEnumOption)
            });
          }
          return Object.assign({}, base, {
            name,
            value: type.elements.map(convert4)
          });
        case "intersection":
          return Object.assign({}, base, {
            name,
            value: type.elements.map(convert4)
          });
        default:
          return Object.assign({}, base, {
            name: "other",
            value: name
          });
      }
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/types.js
var init_types2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/types.js"() {
    init_define_ngDevMode();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/index.js
var init_flow = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/flow/index.js"() {
    init_define_ngDevMode();
    init_convert2();
    init_types2();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/utils.js
var import_es_regexp_exec2, QUOTE_REGEX, trimQuotes, includesQuotes;
var init_utils = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/utils.js"() {
    init_define_ngDevMode();
    import_es_regexp_exec2 = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    QUOTE_REGEX = /^['"]|['"]$/g;
    trimQuotes = function trimQuotes2(str3) {
      return str3.replace(QUOTE_REGEX, "");
    };
    includesQuotes = function includesQuotes2(str3) {
      return QUOTE_REGEX.test(str3);
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/convert.js
var import_es_regexp_exec3, import_mapValues, SIGNATURE_REGEXP, convert5;
var init_convert3 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/convert.js"() {
    init_define_ngDevMode();
    init_es_function_name();
    init_es_array_map();
    init_es_number_is_nan();
    init_es_number_constructor();
    init_es_object_assign();
    import_es_regexp_exec3 = __toESM(require_es_regexp_exec());
    init_es_string_split();
    init_es_array_concat();
    import_mapValues = __toESM(require_mapValues());
    init_utils();
    SIGNATURE_REGEXP = /^\(.*\) => /;
    convert5 = function convert6(type) {
      var name = type.name, raw = type.raw, computed = type.computed, value = type.value;
      var base = {};
      if (typeof raw !== "undefined")
        base.raw = raw;
      switch (name) {
        case "enum": {
          var _values = computed ? value : value.map(function(v) {
            var trimmedValue = trimQuotes(v.value);
            return includesQuotes(v.value) || Number.isNaN(Number(trimmedValue)) ? trimmedValue : Number(trimmedValue);
          });
          return Object.assign({}, base, {
            name,
            value: _values
          });
        }
        case "string":
        case "number":
        case "symbol":
          return Object.assign({}, base, {
            name
          });
        case "func":
          return Object.assign({}, base, {
            name: "function"
          });
        case "bool":
        case "boolean":
          return Object.assign({}, base, {
            name: "boolean"
          });
        case "arrayOf":
        case "array":
          return Object.assign({}, base, {
            name: "array",
            value: value && convert6(value)
          });
        case "object":
          return Object.assign({}, base, {
            name
          });
        case "objectOf":
          return Object.assign({}, base, {
            name,
            value: convert6(value)
          });
        case "shape":
        case "exact":
          var values = (0, import_mapValues.default)(value, function(field) {
            return convert6(field);
          });
          return Object.assign({}, base, {
            name: "object",
            value: values
          });
        case "union":
          return Object.assign({}, base, {
            name: "union",
            value: value.map(function(v) {
              return convert6(v);
            })
          });
        case "instanceOf":
        case "element":
        case "elementType":
        default: {
          if ((name === null || name === void 0 ? void 0 : name.indexOf("|")) > 0) {
            try {
              var literalValues = name.split("|").map(function(v) {
                return JSON.parse(v);
              });
              return Object.assign({}, base, {
                name: "enum",
                value: literalValues
              });
            } catch (err) {
            }
          }
          var otherVal = value ? "".concat(name, "(").concat(value, ")") : name;
          var otherName = SIGNATURE_REGEXP.test(name) ? "function" : "other";
          return Object.assign({}, base, {
            name: otherName,
            value: otherVal
          });
        }
      }
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/types.js
var init_types3 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/types.js"() {
    init_define_ngDevMode();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/index.js
var init_proptypes = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/index.js"() {
    init_define_ngDevMode();
    init_convert3();
    init_types3();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/index.js
var convert7;
var init_convert4 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/index.js"() {
    init_define_ngDevMode();
    init_typescript();
    init_flow();
    init_proptypes();
    convert7 = function convert8(docgenInfo) {
      var type = docgenInfo.type, tsType = docgenInfo.tsType, flowType = docgenInfo.flowType;
      if (type != null)
        return convert5(type);
      if (tsType != null)
        return convert(tsType);
      if (flowType != null)
        return convert3(flowType);
      return null;
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/types.js
var TypeSystem;
var init_types4 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/types.js"() {
    init_define_ngDevMode();
    (function(TypeSystem2) {
      TypeSystem2["JAVASCRIPT"] = "JavaScript";
      TypeSystem2["FLOW"] = "Flow";
      TypeSystem2["TYPESCRIPT"] = "TypeScript";
      TypeSystem2["UNKNOWN"] = "Unknown";
    })(TypeSystem || (TypeSystem = {}));
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/defaultValue.js
function isDefaultValueBlacklisted(value) {
  return BLACKLIST.some(function(x) {
    return x === value;
  });
}
var import_es_object_to_string3, BLACKLIST;
var init_defaultValue = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/defaultValue.js"() {
    init_define_ngDevMode();
    import_es_object_to_string3 = __toESM(require_es_object_to_string());
    BLACKLIST = ["null", "undefined"];
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/docgenInfo.js
function hasDocgen(component) {
  return !!component.__docgenInfo;
}
function isValidDocgenSection(docgenSection) {
  return docgenSection != null && Object.keys(docgenSection).length > 0;
}
function getDocgenSection(component, section) {
  return hasDocgen(component) ? component.__docgenInfo[section] : null;
}
function getDocgenDescription(component) {
  return hasDocgen(component) && str(component.__docgenInfo.description);
}
var init_docgenInfo = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/docgenInfo.js"() {
    init_define_ngDevMode();
    init_es_object_keys();
    init_es_symbol();
    init_es_symbol_description();
    init_string();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/index.js
var init_utils2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/utils/index.js"() {
    init_define_ngDevMode();
    init_defaultValue();
    init_string();
    init_docgenInfo();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/jsdocParser.js
function containsJsDoc(value) {
  return value != null && value.includes("@");
}
function parse(content, tags) {
  var ast;
  try {
    ast = import_doctrine.default.parse(content, {
      tags,
      sloppy: true
    });
  } catch (e) {
    console.error(e);
    throw new Error("Cannot parse JSDoc tags.");
  }
  return ast;
}
function extractJsDocTags(ast) {
  var extractedTags = {
    params: null,
    returns: null,
    ignore: false
  };
  for (var i = 0; i < ast.tags.length; i += 1) {
    var tag = ast.tags[i];
    if (tag.title === "ignore") {
      extractedTags.ignore = true;
      break;
    } else {
      switch (tag.title) {
        case "param":
        case "arg":
        case "argument": {
          var paramTag = extractParam(tag);
          if (paramTag != null) {
            if (extractedTags.params == null) {
              extractedTags.params = [];
            }
            extractedTags.params.push(paramTag);
          }
          break;
        }
        case "returns": {
          var returnsTag = extractReturns(tag);
          if (returnsTag != null) {
            extractedTags.returns = returnsTag;
          }
          break;
        }
        default:
          break;
      }
    }
  }
  return extractedTags;
}
function extractParam(tag) {
  var paramName = tag.name;
  if (paramName != null && paramName !== "null-null") {
    return {
      name: tag.name,
      type: tag.type,
      description: tag.description,
      getPrettyName: function getPrettyName() {
        if (paramName.includes("null")) {
          return paramName.replace("-null", "").replace(".null", "");
        }
        return tag.name;
      },
      getTypeName: function getTypeName() {
        return tag.type != null ? extractTypeName(tag.type) : null;
      }
    };
  }
  return null;
}
function extractReturns(tag) {
  if (tag.type != null) {
    return {
      type: tag.type,
      description: tag.description,
      getTypeName: function getTypeName() {
        return extractTypeName(tag.type);
      }
    };
  }
  return null;
}
function extractTypeName(type) {
  if (type.type === "NameExpression") {
    return type.name;
  }
  if (type.type === "RecordType") {
    var recordFields = type.fields.map(function(field) {
      if (field.value != null) {
        var valueTypeName = extractTypeName(field.value);
        return "".concat(field.key, ": ").concat(valueTypeName);
      }
      return field.key;
    });
    return "({".concat(recordFields.join(", "), "})");
  }
  if (type.type === "UnionType") {
    var unionElements = type.elements.map(extractTypeName);
    return "(".concat(unionElements.join("|"), ")");
  }
  if (type.type === "ArrayType") {
    return "[]";
  }
  if (type.type === "TypeApplication") {
    if (type.expression != null) {
      if (type.expression.name === "Array") {
        var arrayType = extractTypeName(type.applications[0]);
        return "".concat(arrayType, "[]");
      }
    }
  }
  if (type.type === "NullableType" || type.type === "NonNullableType" || type.type === "OptionalType") {
    return extractTypeName(type.expression);
  }
  if (type.type === "AllLiteral") {
    return "any";
  }
  return null;
}
var import_es_regexp_exec4, import_doctrine, DEFAULT_OPTIONS, parseJsDoc;
var init_jsdocParser = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/jsdocParser.js"() {
    init_define_ngDevMode();
    init_es_array_includes();
    init_es_string_includes();
    init_es_symbol();
    init_es_symbol_description();
    init_es_function_name();
    import_es_regexp_exec4 = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    init_es_array_map();
    init_es_array_concat();
    init_es_array_join();
    import_doctrine = __toESM(require_doctrine());
    DEFAULT_OPTIONS = {
      tags: ["param", "arg", "argument", "returns", "ignore"]
    };
    parseJsDoc = function parseJsDoc2(value) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_OPTIONS;
      if (!containsJsDoc(value)) {
        return {
          includesJsDoc: false,
          ignore: false
        };
      }
      var jsDocAst = parse(value, options.tags);
      var extractedTags = extractJsDocTags(jsDocAst);
      if (extractedTags.ignore) {
        return {
          includesJsDoc: true,
          ignore: true
        };
      }
      return {
        includesJsDoc: true,
        ignore: false,
        description: jsDocAst.description,
        extractedTags
      };
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/utils.js
function isTooLongForTypeSummary(value) {
  return value.length > MAX_TYPE_SUMMARY_LENGTH;
}
function isTooLongForDefaultValueSummary(value) {
  return value.length > MAX_DEFAULT_VALUE_SUMMARY_LENGTH;
}
function createSummaryValue(summary, detail) {
  if (summary === detail) {
    return {
      summary
    };
  }
  return {
    summary,
    detail
  };
}
var import_es_regexp_exec5, MAX_TYPE_SUMMARY_LENGTH, MAX_DEFAULT_VALUE_SUMMARY_LENGTH, normalizeNewlines;
var init_utils3 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/utils.js"() {
    init_define_ngDevMode();
    import_es_regexp_exec5 = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    MAX_TYPE_SUMMARY_LENGTH = 90;
    MAX_DEFAULT_VALUE_SUMMARY_LENGTH = 50;
    normalizeNewlines = function normalizeNewlines2(string) {
      return string.replace(/\\r\\n/g, "\\n");
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createType.js
function generateUnionElement(_ref) {
  var name = _ref.name, value = _ref.value, elements = _ref.elements, raw = _ref.raw;
  if (value != null) {
    return value;
  }
  if (elements != null) {
    return elements.map(generateUnionElement).join(" | ");
  }
  if (raw != null) {
    return raw;
  }
  return name;
}
function generateUnion(_ref2) {
  var name = _ref2.name, raw = _ref2.raw, elements = _ref2.elements;
  if (elements != null) {
    return createSummaryValue(elements.map(generateUnionElement).join(" | "));
  }
  if (raw != null) {
    return createSummaryValue(raw.replace(/^\|\s*/, ""));
  }
  return createSummaryValue(name);
}
function generateFuncSignature(_ref3) {
  var type = _ref3.type, raw = _ref3.raw;
  if (raw != null) {
    return createSummaryValue(raw);
  }
  return createSummaryValue(type);
}
function generateObjectSignature(_ref4) {
  var type = _ref4.type, raw = _ref4.raw;
  if (raw != null) {
    return !isTooLongForTypeSummary(raw) ? createSummaryValue(raw) : createSummaryValue(type, raw);
  }
  return createSummaryValue(type);
}
function generateSignature(flowType) {
  var type = flowType.type;
  return type === "object" ? generateObjectSignature(flowType) : generateFuncSignature(flowType);
}
function generateDefault(_ref5) {
  var name = _ref5.name, raw = _ref5.raw;
  if (raw != null) {
    return !isTooLongForTypeSummary(raw) ? createSummaryValue(raw) : createSummaryValue(name, raw);
  }
  return createSummaryValue(name);
}
function createType(type) {
  if (type == null) {
    return null;
  }
  switch (type.name) {
    case FlowTypesType.UNION:
      return generateUnion(type);
    case FlowTypesType.SIGNATURE:
      return generateSignature(type);
    default:
      return generateDefault(type);
  }
}
var import_es_regexp_exec6, FlowTypesType;
var init_createType = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createType.js"() {
    init_define_ngDevMode();
    init_es_function_name();
    init_es_array_join();
    init_es_array_map();
    import_es_regexp_exec6 = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    init_utils3();
    (function(FlowTypesType2) {
      FlowTypesType2["UNION"] = "union";
      FlowTypesType2["SIGNATURE"] = "signature";
    })(FlowTypesType || (FlowTypesType = {}));
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createDefaultValue.js
function createDefaultValue(defaultValue, type) {
  if (defaultValue != null) {
    var value = defaultValue.value;
    if (!isDefaultValueBlacklisted(value)) {
      return !isTooLongForDefaultValueSummary(value) ? createSummaryValue(value) : createSummaryValue(type.name, value);
    }
  }
  return null;
}
var init_createDefaultValue = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createDefaultValue.js"() {
    init_define_ngDevMode();
    init_es_function_name();
    init_utils3();
    init_defaultValue();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createPropDef.js
var createFlowPropDef;
var init_createPropDef = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/flow/createPropDef.js"() {
    init_define_ngDevMode();
    init_es_symbol();
    init_es_symbol_description();
    init_createType();
    init_createDefaultValue();
    createFlowPropDef = function createFlowPropDef2(propName, docgenInfo) {
      var flowType = docgenInfo.flowType, description = docgenInfo.description, required = docgenInfo.required, defaultValue = docgenInfo.defaultValue;
      return {
        name: propName,
        type: createType(flowType),
        required,
        description,
        defaultValue: createDefaultValue(defaultValue, flowType)
      };
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createType.js
function createType2(_ref) {
  var tsType = _ref.tsType, required = _ref.required;
  if (tsType == null) {
    return null;
  }
  if (!required) {
    return createSummaryValue(tsType.name.replace(" | undefined", ""));
  }
  return createSummaryValue(tsType.name);
}
var import_es_regexp_exec7;
var init_createType2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createType.js"() {
    init_define_ngDevMode();
    import_es_regexp_exec7 = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    init_es_function_name();
    init_utils3();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createDefaultValue.js
function createDefaultValue2(_ref) {
  var defaultValue = _ref.defaultValue;
  if (defaultValue != null) {
    var value = defaultValue.value;
    if (!isDefaultValueBlacklisted(value)) {
      return createSummaryValue(value);
    }
  }
  return null;
}
var init_createDefaultValue2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createDefaultValue.js"() {
    init_define_ngDevMode();
    init_utils3();
    init_defaultValue();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createPropDef.js
var createTsPropDef;
var init_createPropDef2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/typeScript/createPropDef.js"() {
    init_define_ngDevMode();
    init_es_symbol();
    init_es_symbol_description();
    init_createType2();
    init_createDefaultValue2();
    createTsPropDef = function createTsPropDef2(propName, docgenInfo) {
      var description = docgenInfo.description, required = docgenInfo.required;
      return {
        name: propName,
        type: createType2(docgenInfo),
        required,
        description,
        defaultValue: createDefaultValue2(docgenInfo)
      };
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/createPropDef.js
function createType3(type) {
  return type != null ? createSummaryValue(type.name) : null;
}
function isReactDocgenTypescript(defaultValue) {
  var computed = defaultValue.computed, func = defaultValue.func;
  return typeof computed === "undefined" && typeof func === "undefined";
}
function isStringValued(type) {
  if (!type) {
    return false;
  }
  if (type.name === "string") {
    return true;
  }
  if (type.name === "enum") {
    return Array.isArray(type.value) && type.value.every(function(_ref) {
      var tv = _ref.value;
      return typeof tv === "string" && tv[0] === '"' && tv[tv.length - 1] === '"';
    });
  }
  return false;
}
function createDefaultValue3(defaultValue, type) {
  if (defaultValue != null) {
    var value = defaultValue.value;
    if (!isDefaultValueBlacklisted(value)) {
      if (isReactDocgenTypescript(defaultValue) && isStringValued(type)) {
        return createSummaryValue(JSON.stringify(value));
      }
      return createSummaryValue(value);
    }
  }
  return null;
}
function createBasicPropDef(name, type, docgenInfo) {
  var description = docgenInfo.description, required = docgenInfo.required, defaultValue = docgenInfo.defaultValue;
  return {
    name,
    type: createType3(type),
    required,
    description,
    defaultValue: createDefaultValue3(defaultValue, type)
  };
}
function applyJsDocResult(propDef, jsDocParsingResult) {
  if (jsDocParsingResult.includesJsDoc) {
    var description = jsDocParsingResult.description, extractedTags = jsDocParsingResult.extractedTags;
    if (description != null) {
      propDef.description = jsDocParsingResult.description;
    }
    var hasParams = extractedTags.params != null;
    var hasReturns = extractedTags.returns != null && extractedTags.returns.type != null;
    if (hasParams || hasReturns) {
      propDef.jsDocTags = {
        params: hasParams && extractedTags.params.map(function(x) {
          return {
            name: x.getPrettyName(),
            description: x.description
          };
        }),
        returns: hasReturns && {
          description: extractedTags.returns.description
        }
      };
    }
  }
  return propDef;
}
var import_es_object_to_string4, javaScriptFactory, tsFactory, flowFactory, unknownFactory, getPropDefFactory;
var init_createPropDef3 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/createPropDef.js"() {
    init_define_ngDevMode();
    init_es_function_name();
    import_es_object_to_string4 = __toESM(require_es_object_to_string());
    init_es_symbol();
    init_es_symbol_description();
    init_es_array_map();
    init_types4();
    init_utils3();
    init_createPropDef();
    init_defaultValue();
    init_createPropDef2();
    init_convert4();
    javaScriptFactory = function javaScriptFactory2(propName, docgenInfo, jsDocParsingResult) {
      var propDef = createBasicPropDef(propName, docgenInfo.type, docgenInfo);
      propDef.sbType = convert7(docgenInfo);
      return applyJsDocResult(propDef, jsDocParsingResult);
    };
    tsFactory = function tsFactory2(propName, docgenInfo, jsDocParsingResult) {
      var propDef = createTsPropDef(propName, docgenInfo);
      propDef.sbType = convert7(docgenInfo);
      return applyJsDocResult(propDef, jsDocParsingResult);
    };
    flowFactory = function flowFactory2(propName, docgenInfo, jsDocParsingResult) {
      var propDef = createFlowPropDef(propName, docgenInfo);
      propDef.sbType = convert7(docgenInfo);
      return applyJsDocResult(propDef, jsDocParsingResult);
    };
    unknownFactory = function unknownFactory2(propName, docgenInfo, jsDocParsingResult) {
      var propDef = createBasicPropDef(propName, {
        name: "unknown"
      }, docgenInfo);
      return applyJsDocResult(propDef, jsDocParsingResult);
    };
    getPropDefFactory = function getPropDefFactory2(typeSystem) {
      switch (typeSystem) {
        case TypeSystem.JAVASCRIPT:
          return javaScriptFactory;
        case TypeSystem.TYPESCRIPT:
          return tsFactory;
        case TypeSystem.FLOW:
          return flowFactory;
        default:
          return unknownFactory;
      }
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/extractDocgenProps.js
function extractProp(propName, docgenInfo, typeSystem, createPropDef) {
  var jsDocParsingResult = parseJsDoc(docgenInfo.description);
  var isIgnored = jsDocParsingResult.includesJsDoc && jsDocParsingResult.ignore;
  if (!isIgnored) {
    var propDef = createPropDef(propName, docgenInfo, jsDocParsingResult);
    return {
      propDef,
      jsDocTags: jsDocParsingResult.extractedTags,
      docgenInfo,
      typeSystem
    };
  }
  return null;
}
function extractComponentDescription(component) {
  return component != null && getDocgenDescription(component);
}
var import_es_object_to_string5, getTypeSystem, extractComponentSectionArray, extractComponentSectionObject, extractComponentProps;
var init_extractDocgenProps = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/extractDocgenProps.js"() {
    init_define_ngDevMode();
    init_es_array_map();
    init_es_object_assign();
    init_es_function_name();
    init_es_object_keys();
    init_es_array_filter();
    import_es_object_to_string5 = __toESM(require_es_object_to_string());
    init_es_symbol();
    init_es_symbol_description();
    init_jsdocParser();
    init_types4();
    init_utils2();
    init_createPropDef3();
    getTypeSystem = function getTypeSystem2(docgenInfo) {
      if (docgenInfo.type != null) {
        return TypeSystem.JAVASCRIPT;
      }
      if (docgenInfo.flowType != null) {
        return TypeSystem.FLOW;
      }
      if (docgenInfo.tsType != null) {
        return TypeSystem.TYPESCRIPT;
      }
      return TypeSystem.UNKNOWN;
    };
    extractComponentSectionArray = function extractComponentSectionArray2(docgenSection) {
      var typeSystem = getTypeSystem(docgenSection[0]);
      var createPropDef = getPropDefFactory(typeSystem);
      return docgenSection.map(function(item) {
        var _item$type;
        var sanitizedItem = item;
        if ((_item$type = item.type) !== null && _item$type !== void 0 && _item$type.elements) {
          sanitizedItem = Object.assign({}, item, {
            type: Object.assign({}, item.type, {
              value: item.type.elements
            })
          });
        }
        return extractProp(sanitizedItem.name, sanitizedItem, typeSystem, createPropDef);
      });
    };
    extractComponentSectionObject = function extractComponentSectionObject2(docgenSection) {
      var docgenPropsKeys = Object.keys(docgenSection);
      var typeSystem = getTypeSystem(docgenSection[docgenPropsKeys[0]]);
      var createPropDef = getPropDefFactory(typeSystem);
      return docgenPropsKeys.map(function(propName) {
        var docgenInfo = docgenSection[propName];
        return docgenInfo != null ? extractProp(propName, docgenInfo, typeSystem, createPropDef) : null;
      }).filter(Boolean);
    };
    extractComponentProps = function extractComponentProps2(component, section) {
      var docgenSection = getDocgenSection(component, section);
      if (!isValidDocgenSection(docgenSection)) {
        return [];
      }
      return Array.isArray(docgenSection) ? extractComponentSectionArray(docgenSection) : extractComponentSectionObject(docgenSection);
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/PropDef.js
var init_PropDef = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/PropDef.js"() {
    init_define_ngDevMode();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/index.js
var init_docgen = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/docgen/index.js"() {
    init_define_ngDevMode();
    init_types4();
    init_utils2();
    init_extractDocgenProps();
    init_PropDef();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/types.js
var init_types5 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/types.js"() {
    init_define_ngDevMode();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/enhanceArgTypes.js
var enhanceArgTypes;
var init_enhanceArgTypes = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/enhanceArgTypes.js"() {
    init_define_ngDevMode();
    init_esm();
    enhanceArgTypes = function enhanceArgTypes2(context) {
      var component = context.component, userArgTypes = context.argTypes, _context$parameters$d = context.parameters.docs, docs = _context$parameters$d === void 0 ? {} : _context$parameters$d;
      var extractArgTypes = docs.extractArgTypes;
      var extractedArgTypes = extractArgTypes && component ? extractArgTypes(component) : {};
      var withExtractedTypes = extractedArgTypes ? combineParameters(extractedArgTypes, userArgTypes) : userArgTypes;
      return withExtractedTypes;
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/argTypes/index.js
var init_argTypes = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/argTypes/index.js"() {
    init_define_ngDevMode();
    init_convert4();
    init_docgen();
    init_jsdocParser();
    init_types5();
    init_utils3();
    init_enhanceArgTypes();
  }
});

// node_modules/@storybook/docs-tools/dist/esm/shared.js
var ADDON_ID, PANEL_ID, PARAM_KEY, SNIPPET_RENDERED, SourceType;
var init_shared = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/shared.js"() {
    init_define_ngDevMode();
    ADDON_ID = "storybook/docs";
    PANEL_ID = "".concat(ADDON_ID, "/panel");
    PARAM_KEY = "docs";
    SNIPPET_RENDERED = "".concat(ADDON_ID, "/snippet-rendered");
    (function(SourceType2) {
      SourceType2["AUTO"] = "auto";
      SourceType2["CODE"] = "code";
      SourceType2["DYNAMIC"] = "dynamic";
    })(SourceType || (SourceType = {}));
  }
});

// node_modules/@storybook/docs-tools/dist/esm/hasDocsOrControls.js
var import_es_object_to_string6, import_es_regexp_exec8, packageRe, hasDocsOrControls;
var init_hasDocsOrControls = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/hasDocsOrControls.js"() {
    init_define_ngDevMode();
    import_es_object_to_string6 = __toESM(require_es_object_to_string());
    import_es_regexp_exec8 = __toESM(require_es_regexp_exec());
    init_es_function_name();
    packageRe = /(addons\/|addon-)(docs|controls)/;
    hasDocsOrControls = function hasDocsOrControls2(options) {
      var _options$presetsList;
      return (_options$presetsList = options.presetsList) === null || _options$presetsList === void 0 ? void 0 : _options$presetsList.some(function(preset) {
        return packageRe.test(preset.name);
      });
    };
  }
});

// node_modules/@storybook/docs-tools/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  ADDON_ID: () => ADDON_ID,
  MAX_DEFAULT_VALUE_SUMMARY_LENGTH: () => MAX_DEFAULT_VALUE_SUMMARY_LENGTH,
  MAX_TYPE_SUMMARY_LENGTH: () => MAX_TYPE_SUMMARY_LENGTH,
  PANEL_ID: () => PANEL_ID,
  PARAM_KEY: () => PARAM_KEY,
  SNIPPET_RENDERED: () => SNIPPET_RENDERED,
  SourceType: () => SourceType,
  TypeSystem: () => TypeSystem,
  convert: () => convert7,
  createSummaryValue: () => createSummaryValue,
  enhanceArgTypes: () => enhanceArgTypes,
  extractComponentDescription: () => extractComponentDescription,
  extractComponentProps: () => extractComponentProps,
  extractComponentSectionArray: () => extractComponentSectionArray,
  extractComponentSectionObject: () => extractComponentSectionObject,
  getDocgenDescription: () => getDocgenDescription,
  getDocgenSection: () => getDocgenSection,
  hasDocgen: () => hasDocgen,
  hasDocsOrControls: () => hasDocsOrControls,
  isDefaultValueBlacklisted: () => isDefaultValueBlacklisted,
  isTooLongForDefaultValueSummary: () => isTooLongForDefaultValueSummary,
  isTooLongForTypeSummary: () => isTooLongForTypeSummary,
  isValidDocgenSection: () => isValidDocgenSection,
  normalizeNewlines: () => normalizeNewlines,
  parseJsDoc: () => parseJsDoc,
  str: () => str
});
var init_esm2 = __esm({
  "node_modules/@storybook/docs-tools/dist/esm/index.js"() {
    init_define_ngDevMode();
    init_argTypes();
    init_shared();
    init_hasDocsOrControls();
  }
});

export {
  str,
  esm_exports,
  init_esm2 as init_esm
};
//# sourceMappingURL=chunk-RX73PFGZ.js.map

{
  "version": 3,
  "sources": ["../../../../node_modules/lodash/_arrayReduce.js", "../../../../node_modules/lodash/_basePropertyOf.js", "../../../../node_modules/lodash/_deburrLetter.js", "../../../../node_modules/lodash/deburr.js", "../../../../node_modules/lodash/_asciiWords.js", "../../../../node_modules/lodash/_hasUnicodeWord.js", "../../../../node_modules/lodash/_unicodeWords.js", "../../../../node_modules/lodash/words.js", "../../../../node_modules/lodash/_createCompounder.js", "../../../../node_modules/lodash/_baseSlice.js", "../../../../node_modules/lodash/_castSlice.js", "../../../../node_modules/lodash/_hasUnicode.js", "../../../../node_modules/lodash/_asciiToArray.js", "../../../../node_modules/lodash/_unicodeToArray.js", "../../../../node_modules/lodash/_stringToArray.js", "../../../../node_modules/lodash/_createCaseFirst.js", "../../../../node_modules/lodash/upperFirst.js", "../../../../node_modules/lodash/startCase.js"],
  "sourcesContent": ["/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n", "/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = basePropertyOf;\n", "var basePropertyOf = require('./_basePropertyOf');\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 's'\n};\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\nmodule.exports = deburrLetter;\n", "var deburrLetter = require('./_deburrLetter'),\n    toString = require('./toString');\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n\n/** Used to compose unicode capture groups. */\nvar rsCombo = '[' + rsComboRange + ']';\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('d\u00E9j\u00E0 vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\nmodule.exports = deburr;\n", "/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n", "/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n", "/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n", "var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n", "var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n", "/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n", "var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n", "/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n", "/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n", "/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n", "var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n", "var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n", "var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n", "var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n"],
  "mappings": ";;;;;;;;;AAAA;;;AAYA,aAASA,YAAYC,OAAOC,UAAUC,aAAaC,WAAW;AAC5D,UAAIC,QAAQ,IACRC,SAASL,SAAS,OAAO,IAAIA,MAAMK;AAEvC,UAAIF,aAAaE,QAAQ;AACvBH,sBAAcF,MAAM,EAAEI;MACvB;AACD,aAAO,EAAEA,QAAQC,QAAQ;AACvBH,sBAAcD,SAASC,aAAaF,MAAMI,QAAQA,OAAOJ,KAAnC;MACvB;AACD,aAAOE;IACR;AAEDI,WAAOC,UAAUR;;;;;ACzBjB;;;AAOA,aAASS,eAAeC,QAAQ;AAC9B,aAAO,SAASC,KAAK;AACnB,eAAOD,UAAU,OAAOE,SAAYF,OAAOC;MAC5C;IACF;AAEDE,WAAOC,UAAUL;;;;;ACbjB;;;QAAIM,iBAAiBC;AAGrB,QAAIC,kBAAkB;MAEpB,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAC1E,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAC1E,QAAQ;MAAM,QAAQ;MACtB,QAAQ;MAAM,QAAQ;MACtB,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MACtB,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAC1E,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAC1E,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MAAK,QAAQ;MAChD,QAAQ;MAAM,QAAQ;MAAK,QAAQ;MACnC,QAAQ;MAAM,QAAQ;MACtB,QAAQ;MAAM,QAAQ;MACtB,QAAQ;MAER,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAC1B,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACvE,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MACxD,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACtF,UAAU;MAAM,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MAAK,UAAU;MACtF,UAAU;MAAM,UAAU;MAC1B,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAAK,UAAU;MACzC,UAAU;MAAM,UAAU;MAC1B,UAAU;MAAM,UAAU;MAC1B,UAAU;MAAM,UAAU;IAtDN;AAiEtB,QAAIC,eAAeH,eAAeE,eAAD;AAEjCE,WAAOC,UAAUF;;;;;ACtEjB;;;QAAIG,eAAeC;AAAnB,QACIC,WAAWD;AAGf,QAAIE,UAAU;AAGd,QAAIC,oBAAoB;AAAxB,QACIC,wBAAwB;AAD5B,QAEIC,sBAAsB;AAF1B,QAGIC,eAAeH,oBAAoBC,wBAAwBC;AAG/D,QAAIE,UAAU,MAAMD,eAAe;AAMnC,QAAIE,cAAcC,OAAOF,SAAS,GAAV;AAoBxB,aAASG,OAAOC,QAAQ;AACtBA,eAASV,SAASU,MAAD;AACjB,aAAOA,UAAUA,OAAOC,QAAQV,SAASH,YAAxB,EAAsCa,QAAQJ,aAAa,EAA3D;IAClB;AAEDK,WAAOC,UAAUJ;;;;;AC5CjB;;;AACA,QAAIK,cAAc;AASlB,aAASC,WAAWC,QAAQ;AAC1B,aAAOA,OAAOC,MAAMH,WAAb,KAA6B,CAAA;IACrC;AAEDI,WAAOC,UAAUJ;;;;;ACdjB;;;AACA,QAAIK,mBAAmB;AASvB,aAASC,eAAeC,QAAQ;AAC9B,aAAOF,iBAAiBG,KAAKD,MAAtB;IACR;AAEDE,WAAOC,UAAUJ;;;;;ACdjB;;;AACA,QAAIK,gBAAgB;AAApB,QACIC,oBAAoB;AADxB,QAEIC,wBAAwB;AAF5B,QAGIC,sBAAsB;AAH1B,QAIIC,eAAeH,oBAAoBC,wBAAwBC;AAJ/D,QAKIE,iBAAiB;AALrB,QAMIC,eAAe;AANnB,QAOIC,gBAAgB;AAPpB,QAQIC,iBAAiB;AARrB,QASIC,qBAAqB;AATzB,QAUIC,eAAe;AAVnB,QAWIC,eAAe;AAXnB,QAYIC,aAAa;AAZjB,QAaIC,eAAeN,gBAAgBC,iBAAiBC,qBAAqBC;AAGzE,QAAII,SAAS;AAAb,QACIC,UAAU,MAAMF,eAAe;AADnC,QAEIG,UAAU,MAAMZ,eAAe;AAFnC,QAGIa,WAAW;AAHf,QAIIC,YAAY,MAAMb,iBAAiB;AAJvC,QAKIc,UAAU,MAAMb,eAAe;AALnC,QAMIc,SAAS,OAAOpB,gBAAgBa,eAAeI,WAAWZ,iBAAiBC,eAAeK,eAAe;AAN7G,QAOIU,SAAS;AAPb,QAQIC,aAAa,QAAQN,UAAU,MAAMK,SAAS;AARlD,QASIE,cAAc,OAAOvB,gBAAgB;AATzC,QAUIwB,aAAa;AAVjB,QAWIC,aAAa;AAXjB,QAYIC,UAAU,MAAMf,eAAe;AAZnC,QAaIgB,QAAQ;AAGZ,QAAIC,cAAc,QAAQT,UAAU,MAAMC,SAAS;AAAnD,QACIS,cAAc,QAAQH,UAAU,MAAMN,SAAS;AADnD,QAEIU,kBAAkB,QAAQhB,SAAS;AAFvC,QAGIiB,kBAAkB,QAAQjB,SAAS;AAHvC,QAIIkB,WAAWV,aAAa;AAJ5B,QAKIW,WAAW,MAAMrB,aAAa;AALlC,QAMIsB,YAAY,QAAQP,QAAQ,QAAQ,CAACJ,aAAaC,YAAYC,UAA1B,EAAsCU,KAAK,GAA3C,IAAkD,MAAMF,WAAWD,WAAW;AANtH,QAOII,aAAa;AAPjB,QAQIC,aAAa;AARjB,QASIC,QAAQL,WAAWD,WAAWE;AATlC,QAUIK,UAAU,QAAQ,CAACrB,WAAWM,YAAYC,UAAxB,EAAoCU,KAAK,GAAzC,IAAgD,MAAMG;AAG5E,QAAIE,gBAAgBC,OAAO,CACzBf,UAAU,MAAMP,UAAU,MAAMW,kBAAkB,QAAQ,CAACf,SAASW,SAAS,GAAnB,EAAwBS,KAAK,GAA7B,IAAoC,KAC9FN,cAAc,MAAME,kBAAkB,QAAQ,CAAChB,SAASW,UAAUE,aAAa,GAAjC,EAAsCO,KAAK,GAA3C,IAAkD,KAChGT,UAAU,MAAME,cAAc,MAAME,iBACpCJ,UAAU,MAAMK,iBAChBM,YACAD,YACAnB,UACAsB,OARyB,EASzBJ,KAAK,GAToB,GASd,GATa;AAkB1B,aAASO,aAAaC,QAAQ;AAC5B,aAAOA,OAAOC,MAAMJ,aAAb,KAA+B,CAAA;IACvC;AAEDK,WAAOC,UAAUJ;;;;;ACpEjB;;;QAAIK,aAAaC;AAAjB,QACIC,iBAAiBD;AADrB,QAEIE,WAAWF;AAFf,QAGIG,eAAeH;AAqBnB,aAASI,MAAMC,QAAQC,SAASC,OAAO;AACrCF,eAASH,SAASG,MAAD;AACjBC,gBAAUC,QAAQC,SAAYF;AAE9B,UAAIA,YAAYE,QAAW;AACzB,eAAOP,eAAeI,MAAD,IAAWF,aAAaE,MAAD,IAAWN,WAAWM,MAAD;MAClE;AACD,aAAOA,OAAOI,MAAMH,OAAb,KAAyB,CAAA;IACjC;AAEDI,WAAOC,UAAUP;;;;;AClCjB;;;QAAIQ,cAAcC;AAAlB,QACIC,SAASD;AADb,QAEIE,QAAQF;AAGZ,QAAIG,SAAS;AAGb,QAAIC,SAASC,OAAOF,QAAQ,GAAT;AASnB,aAASG,iBAAiBC,UAAU;AAClC,aAAO,SAASC,QAAQ;AACtB,eAAOT,YAAYG,MAAMD,OAAOO,MAAD,EAASC,QAAQL,QAAQ,EAA/B,CAAD,GAAsCG,UAAU,EAAtD;MACnB;IACF;AAEDG,WAAOC,UAAUL;;;;;ACvBjB;;;AASA,aAASM,UAAUC,OAAOC,OAAOC,KAAK;AACpC,UAAIC,QAAQ,IACRC,SAASJ,MAAMI;AAEnB,UAAIH,QAAQ,GAAG;AACbA,gBAAQ,CAACA,QAAQG,SAAS,IAAKA,SAASH;MACzC;AACDC,YAAMA,MAAME,SAASA,SAASF;AAC9B,UAAIA,MAAM,GAAG;AACXA,eAAOE;MACR;AACDA,eAASH,QAAQC,MAAM,IAAMA,MAAMD,UAAW;AAC9CA,iBAAW;AAEX,UAAII,SAASC,MAAMF,MAAD;AAClB,aAAO,EAAED,QAAQC,QAAQ;AACvBC,eAAOF,SAASH,MAAMG,QAAQF;MAC/B;AACD,aAAOI;IACR;AAEDE,WAAOC,UAAUT;;;;;AC9BjB;;;QAAIU,YAAYC;AAWhB,aAASC,UAAUC,OAAOC,OAAOC,KAAK;AACpC,UAAIC,SAASH,MAAMG;AACnBD,YAAMA,QAAQE,SAAYD,SAASD;AACnC,aAAQ,CAACD,SAASC,OAAOC,SAAUH,QAAQH,UAAUG,OAAOC,OAAOC,GAAf;IACrD;AAEDG,WAAOC,UAAUP;;;;;ACjBjB;;;AACA,QAAIQ,gBAAgB;AAApB,QACIC,oBAAoB;AADxB,QAEIC,wBAAwB;AAF5B,QAGIC,sBAAsB;AAH1B,QAIIC,eAAeH,oBAAoBC,wBAAwBC;AAJ/D,QAKIE,aAAa;AAGjB,QAAIC,QAAQ;AAGZ,QAAIC,eAAeC,OAAO,MAAMF,QAAQN,gBAAiBI,eAAeC,aAAa,GAA5D;AASzB,aAASI,WAAWC,QAAQ;AAC1B,aAAOH,aAAaI,KAAKD,MAAlB;IACR;AAEDE,WAAOC,UAAUJ;;;;;ACzBjB;;;AAOA,aAASK,aAAaC,QAAQ;AAC5B,aAAOA,OAAOC,MAAM,EAAb;IACR;AAEDC,WAAOC,UAAUJ;;;;;ACXjB;;;AACA,QAAIK,gBAAgB;AAApB,QACIC,oBAAoB;AADxB,QAEIC,wBAAwB;AAF5B,QAGIC,sBAAsB;AAH1B,QAIIC,eAAeH,oBAAoBC,wBAAwBC;AAJ/D,QAKIE,aAAa;AAGjB,QAAIC,WAAW,MAAMN,gBAAgB;AAArC,QACIO,UAAU,MAAMH,eAAe;AADnC,QAEII,SAAS;AAFb,QAGIC,aAAa,QAAQF,UAAU,MAAMC,SAAS;AAHlD,QAIIE,cAAc,OAAOV,gBAAgB;AAJzC,QAKIW,aAAa;AALjB,QAMIC,aAAa;AANjB,QAOIC,QAAQ;AAGZ,QAAIC,WAAWL,aAAa;AAA5B,QACIM,WAAW,MAAMV,aAAa;AADlC,QAEIW,YAAY,QAAQH,QAAQ,QAAQ,CAACH,aAAaC,YAAYC,UAA1B,EAAsCK,KAAK,GAA3C,IAAkD,MAAMF,WAAWD,WAAW;AAFtH,QAGII,QAAQH,WAAWD,WAAWE;AAHlC,QAIIG,WAAW,QAAQ,CAACT,cAAcH,UAAU,KAAKA,SAASI,YAAYC,YAAYN,QAA/D,EAAyEW,KAAK,GAA9E,IAAqF;AAG5G,QAAIG,YAAYC,OAAOb,SAAS,QAAQA,SAAS,OAAOW,WAAWD,OAAO,GAApD;AAStB,aAASI,eAAeC,QAAQ;AAC9B,aAAOA,OAAOC,MAAMJ,SAAb,KAA2B,CAAA;IACnC;AAEDK,WAAOC,UAAUJ;;;;;ACvCjB;;;QAAIK,eAAeC;AAAnB,QACIC,aAAaD;AADjB,QAEIE,iBAAiBF;AASrB,aAASG,cAAcC,QAAQ;AAC7B,aAAOH,WAAWG,MAAD,IACbF,eAAeE,MAAD,IACdL,aAAaK,MAAD;IACjB;AAEDC,WAAOC,UAAUH;;;;;ACjBjB;;;QAAII,YAAYC;AAAhB,QACIC,aAAaD;AADjB,QAEIE,gBAAgBF;AAFpB,QAGIG,WAAWH;AASf,aAASI,gBAAgBC,YAAY;AACnC,aAAO,SAASC,QAAQ;AACtBA,iBAASH,SAASG,MAAD;AAEjB,YAAIC,aAAaN,WAAWK,MAAD,IACvBJ,cAAcI,MAAD,IACbE;AAEJ,YAAIC,MAAMF,aACNA,WAAW,KACXD,OAAOI,OAAO,CAAd;AAEJ,YAAIC,WAAWJ,aACXR,UAAUQ,YAAY,CAAb,EAAgBK,KAAK,EAA9B,IACAN,OAAOO,MAAM,CAAb;AAEJ,eAAOJ,IAAIJ,YAAJ,IAAoBM;MAC5B;IACF;AAEDG,WAAOC,UAAUX;;;;;AChCjB;;;QAAIY,kBAAkBC;AAmBtB,QAAIC,aAAaF,gBAAgB,aAAD;AAEhCG,WAAOC,UAAUF;;;;;ACrBjB;;;QAAIG,mBAAmBC;AAAvB,QACIC,aAAaD;AAuBjB,QAAIE,YAAYH,iBAAiB,SAASI,QAAQC,MAAMC,OAAO;AAC7D,aAAOF,UAAUE,QAAQ,MAAM,MAAMJ,WAAWG,IAAD;IAChD,CAF+B;AAIhCE,WAAOC,UAAUL;;;",
  "names": ["arrayReduce", "array", "iteratee", "accumulator", "initAccum", "index", "length", "module", "exports", "basePropertyOf", "object", "key", "undefined", "module", "exports", "basePropertyOf", "require", "deburredLetters", "deburrLetter", "module", "exports", "deburrLetter", "require", "toString", "reLatin", "rsComboMarksRange", "reComboHalfMarksRange", "rsComboSymbolsRange", "rsComboRange", "rsCombo", "reComboMark", "RegExp", "deburr", "string", "replace", "module", "exports", "reAsciiWord", "asciiWords", "string", "match", "module", "exports", "reHasUnicodeWord", "hasUnicodeWord", "string", "test", "module", "exports", "rsAstralRange", "rsComboMarksRange", "reComboHalfMarksRange", "rsComboSymbolsRange", "rsComboRange", "rsDingbatRange", "rsLowerRange", "rsMathOpRange", "rsNonCharRange", "rsPunctuationRange", "rsSpaceRange", "rsUpperRange", "rsVarRange", "rsBreakRange", "rsApos", "rsBreak", "rsCombo", "rsDigits", "rsDingbat", "rsLower", "rsMisc", "rsFitz", "rsModifier", "rsNonAstral", "rsRegional", "rsSurrPair", "rsUpper", "rsZWJ", "rsMiscLower", "rsMiscUpper", "rsOptContrLower", "rsOptContrUpper", "reOptMod", "rsOptVar", "rsOptJoin", "join", "rsOrdLower", "rsOrdUpper", "rsSeq", "rsEmoji", "reUnicodeWord", "RegExp", "unicodeWords", "string", "match", "module", "exports", "asciiWords", "require", "hasUnicodeWord", "toString", "unicodeWords", "words", "string", "pattern", "guard", "undefined", "match", "module", "exports", "arrayReduce", "require", "deburr", "words", "rsApos", "reApos", "RegExp", "createCompounder", "callback", "string", "replace", "module", "exports", "baseSlice", "array", "start", "end", "index", "length", "result", "Array", "module", "exports", "baseSlice", "require", "castSlice", "array", "start", "end", "length", "undefined", "module", "exports", "rsAstralRange", "rsComboMarksRange", "reComboHalfMarksRange", "rsComboSymbolsRange", "rsComboRange", "rsVarRange", "rsZWJ", "reHasUnicode", "RegExp", "hasUnicode", "string", "test", "module", "exports", "asciiToArray", "string", "split", "module", "exports", "rsAstralRange", "rsComboMarksRange", "reComboHalfMarksRange", "rsComboSymbolsRange", "rsComboRange", "rsVarRange", "rsAstral", "rsCombo", "rsFitz", "rsModifier", "rsNonAstral", "rsRegional", "rsSurrPair", "rsZWJ", "reOptMod", "rsOptVar", "rsOptJoin", "join", "rsSeq", "rsSymbol", "reUnicode", "RegExp", "unicodeToArray", "string", "match", "module", "exports", "asciiToArray", "require", "hasUnicode", "unicodeToArray", "stringToArray", "string", "module", "exports", "castSlice", "require", "hasUnicode", "stringToArray", "toString", "createCaseFirst", "methodName", "string", "strSymbols", "undefined", "chr", "charAt", "trailing", "join", "slice", "module", "exports", "createCaseFirst", "require", "upperFirst", "module", "exports", "createCompounder", "require", "upperFirst", "startCase", "result", "word", "index", "module", "exports"]
}

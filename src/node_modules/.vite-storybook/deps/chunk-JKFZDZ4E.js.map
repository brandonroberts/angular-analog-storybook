{
  "version": 3,
  "sources": ["../../../../node_modules/uuid-browser/lib/rng-browser.js", "../../../../node_modules/uuid-browser/lib/bytesToUuid.js", "../../../../node_modules/uuid-browser/v4.js"],
  "sourcesContent": ["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = typeof global !== 'undefined' && (global.crypto || global.msCrypto); // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n", "/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n", "var rng = require('./lib/rng-browser');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n"],
  "mappings": ";;;;;;AAAA;;;AAIA,QAAIA;AAEJ,QAAIC,SAAS,OAAOC,WAAW,gBAAgBA,OAAOD,UAAUC,OAAOC;AACvE,QAAIF,UAAUA,OAAOG,iBAAiB;AAEhCC,cAAQ,IAAIC,WAAW,EAAf;AACZN,YAAM,SAASO,YAAY;AACzBN,eAAOG,gBAAgBC,KAAvB;AACA,eAAOA;MACR;IACF;AALKA;AAON,QAAI,CAACL,KAAK;AAKJQ,aAAO,IAAIC,MAAM,EAAV;AACXT,YAAM,WAAW;AACf,iBAASU,IAAI,GAAGC,GAAGD,IAAI,IAAIA,KAAK;AAC9B,eAAKA,IAAI,OAAU;AAAGC,gBAAIC,KAAKC,OAAL,IAAgB;AAC1CL,eAAKE,KAAKC,QAAQD,IAAI,MAAS,KAAK;QACrC;AAED,eAAOF;MACR;IACF;AATKA;AAWNM,WAAOC,UAAUf;;;;;AChCjB;;;AAIA,QAAIgB,YAAY,CAAA;AAChB,SAASC,IAAI,GAAGA,IAAI,KAAK,EAAEA,GAAG;AAC5BD,gBAAUC,MAAMA,IAAI,KAAOC,SAAS,EAArB,EAAyBC,OAAO,CAAhC;IAChB;AAFQF;AAIT,aAASG,YAAYC,KAAKC,QAAQ;AAChC,UAAIL,KAAIK,UAAU;AAClB,UAAIC,MAAMP;AACV,aAAOO,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SACvBM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SAAQ,MAChCM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SAAQ,MAChCM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SAAQ,MAChCM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SAAQ,MAChCM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SACxBM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ,SACxBM,IAAIF,IAAIJ,SAAQM,IAAIF,IAAIJ;IACjC;AAEDO,WAAOC,UAAUL;;;;;ACtBjB;;;QAAIM,MAAMC;AACV,QAAIC,cAAcD;AAElB,aAASE,GAAGC,SAASC,KAAKC,QAAQ;AAChC,UAAIC,IAAIF,OAAOC,UAAU;AAEzB,UAAI,OAAOF,WAAY,UAAU;AAC/BC,cAAMD,WAAW,WAAW,IAAII,MAAM,EAAV,IAAgB;AAC5CJ,kBAAU;MACX;AACDA,gBAAUA,WAAW,CAAA;AAErB,UAAIK,OAAOL,QAAQM,WAAWN,QAAQJ,OAAOA,KAAhB;AAG7BS,WAAK,KAAMA,KAAK,KAAK,KAAQ;AAC7BA,WAAK,KAAMA,KAAK,KAAK,KAAQ;AAG7B,UAAIJ,KAAK;AACP,iBAASM,KAAK,GAAGA,KAAK,IAAI,EAAEA,IAAI;AAC9BN,cAAIE,IAAII,MAAMF,KAAKE;QACpB;MACF;AAED,aAAON,OAAOH,YAAYO,IAAD;IAC1B;AAEDG,WAAOC,UAAUV;;;",
  "names": ["rng", "crypto", "global", "msCrypto", "getRandomValues", "rnds8", "Uint8Array", "whatwgRNG", "rnds", "Array", "i", "r", "Math", "random", "module", "exports", "byteToHex", "i", "toString", "substr", "bytesToUuid", "buf", "offset", "bth", "module", "exports", "rng", "require", "bytesToUuid", "v4", "options", "buf", "offset", "i", "Array", "rnds", "random", "ii", "module", "exports"]
}

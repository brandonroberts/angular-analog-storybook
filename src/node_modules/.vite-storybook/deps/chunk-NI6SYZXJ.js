import {
  require_advance_string_index,
  require_fix_regexp_well_known_symbol_logic,
  require_regexp_exec_abstract,
  require_to_string
} from "./chunk-WDY4P2NX.js";
import {
  require_an_object,
  require_function_call,
  require_get_method,
  require_require_object_coercible,
  require_to_length
} from "./chunk-IPK6NK5O.js";
import {
  __esm,
  init_define_ngDevMode
} from "./chunk-XN7ES5DP.js";

// node_modules/core-js/modules/es.string.match.js
var call, fixRegExpWellKnownSymbolLogic, anObject, toLength, toString, requireObjectCoercible, getMethod, advanceStringIndex, regExpExec;
var init_es_string_match = __esm({
  "node_modules/core-js/modules/es.string.match.js"() {
    "use strict";
    init_define_ngDevMode();
    call = require_function_call();
    fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    anObject = require_an_object();
    toLength = require_to_length();
    toString = require_to_string();
    requireObjectCoercible = require_require_object_coercible();
    getMethod = require_get_method();
    advanceStringIndex = require_advance_string_index();
    regExpExec = require_regexp_exec_abstract();
    fixRegExpWellKnownSymbolLogic("match", function(MATCH, nativeMatch, maybeCallNative) {
      return [
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = regexp == void 0 ? void 0 : getMethod(regexp, MATCH);
          return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
        },
        function(string) {
          var rx = anObject(this);
          var S = toString(string);
          var res = maybeCallNative(nativeMatch, rx, S);
          if (res.done)
            return res.value;
          if (!rx.global)
            return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;
          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = toString(result[0]);
            A[n] = matchStr;
            if (matchStr === "")
              rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }
          return n === 0 ? null : A;
        }
      ];
    });
  }
});

export {
  init_es_string_match
};
//# sourceMappingURL=chunk-NI6SYZXJ.js.map

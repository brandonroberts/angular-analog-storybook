{
  "version": 3,
  "sources": ["../../../../node_modules/lodash/_baseSet.js", "../../../../node_modules/lodash/_basePickBy.js"],
  "sourcesContent": ["var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n", "var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;;;QAAIA,cAAcC;AAAlB,QACIC,WAAWD;AADf,QAEIE,UAAUF;AAFd,QAGIG,WAAWH;AAHf,QAIII,QAAQJ;AAYZ,aAASK,QAAQC,QAAQC,MAAMC,OAAOC,YAAY;AAChD,UAAI,CAACN,SAASG,MAAD,GAAU;AACrB,eAAOA;MACR;AACDC,aAAON,SAASM,MAAMD,MAAP;AAEf,UAAII,QAAQ,IACRC,SAASJ,KAAKI,QACdC,YAAYD,SAAS,GACrBE,SAASP;AAEb,aAAOO,UAAU,QAAQ,EAAEH,QAAQC,QAAQ;AACzC,YAAIG,MAAMV,MAAMG,KAAKG,MAAN,GACXK,WAAWP;AAEf,YAAIM,QAAQ,eAAeA,QAAQ,iBAAiBA,QAAQ,aAAa;AACvE,iBAAOR;QACR;AAED,YAAII,SAASE,WAAW;AACtB,cAAII,WAAWH,OAAOC;AACtBC,qBAAWN,aAAaA,WAAWO,UAAUF,KAAKD,MAAhB,IAA0BI;AAC5D,cAAIF,aAAaE,QAAW;AAC1BF,uBAAWZ,SAASa,QAAD,IACfA,WACCd,QAAQK,KAAKG,QAAQ,EAAd,IAAoB,CAAA,IAAK,CAAA;UACtC;QACF;AACDX,oBAAYc,QAAQC,KAAKC,QAAd;AACXF,iBAASA,OAAOC;MACjB;AACD,aAAOR;IACR;AAEDY,WAAOC,UAAUd;;;;;AClDjB;;;QAAIe,UAAUC;AAAd,QACIC,UAAUD;AADd,QAEIE,WAAWF;AAWf,aAASG,WAAWC,QAAQC,OAAOC,WAAW;AAC5C,UAAIC,QAAQ,IACRC,SAASH,MAAMG,QACfC,SAAS,CAAA;AAEb,aAAO,EAAEF,QAAQC,QAAQ;AACvB,YAAIE,OAAOL,MAAME,QACbI,QAAQZ,QAAQK,QAAQM,IAAT;AAEnB,YAAIJ,UAAUK,OAAOD,IAAR,GAAe;AAC1BT,kBAAQQ,QAAQP,SAASQ,MAAMN,MAAP,GAAgBO,KAAjC;QACR;MACF;AACD,aAAOF;IACR;AAEDG,WAAOC,UAAUV;;;",
  "names": ["assignValue", "require", "castPath", "isIndex", "isObject", "toKey", "baseSet", "object", "path", "value", "customizer", "index", "length", "lastIndex", "nested", "key", "newValue", "objValue", "undefined", "module", "exports", "baseGet", "require", "baseSet", "castPath", "basePickBy", "object", "paths", "predicate", "index", "length", "result", "path", "value", "module", "exports"]
}

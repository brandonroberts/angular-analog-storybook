import {
  require_correct_is_regexp_logic,
  require_not_a_regexp
} from "./chunk-OPAZLAKG.js";
import {
  require_to_string
} from "./chunk-WDY4P2NX.js";
import {
  require_export,
  require_function_uncurry_this,
  require_is_pure,
  require_object_get_own_property_descriptor,
  require_require_object_coercible,
  require_to_length
} from "./chunk-IPK6NK5O.js";
import {
  __esm,
  init_define_ngDevMode
} from "./chunk-XN7ES5DP.js";

// node_modules/core-js/modules/es.string.starts-with.js
var $, uncurryThis, getOwnPropertyDescriptor, toLength, toString, notARegExp, requireObjectCoercible, correctIsRegExpLogic, IS_PURE, un$StartsWith, stringSlice, min, CORRECT_IS_REGEXP_LOGIC, MDN_POLYFILL_BUG;
var init_es_string_starts_with = __esm({
  "node_modules/core-js/modules/es.string.starts-with.js"() {
    "use strict";
    init_define_ngDevMode();
    $ = require_export();
    uncurryThis = require_function_uncurry_this();
    getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    toLength = require_to_length();
    toString = require_to_string();
    notARegExp = require_not_a_regexp();
    requireObjectCoercible = require_require_object_coercible();
    correctIsRegExpLogic = require_correct_is_regexp_logic();
    IS_PURE = require_is_pure();
    un$StartsWith = uncurryThis("".startsWith);
    stringSlice = uncurryThis("".slice);
    min = Math.min;
    CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
    MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
      return descriptor && !descriptor.writable;
    }();
    $({
      target: "String",
      proto: true,
      forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
    }, {
      startsWith: function startsWith(searchString) {
        var that = toString(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
        var search = toString(searchString);
        return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
      }
    });
  }
});

export {
  init_es_string_starts_with
};
//# sourceMappingURL=chunk-W2D6HU57.js.map

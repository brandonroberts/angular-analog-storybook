{
  "version": 3,
  "sources": ["../../../../node_modules/core-js/modules/es.number.constructor.js"],
  "sourcesContent": ["'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isForced = require('../internals/is-forced');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar hasOwn = require('../internals/has-own-property');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isSymbol = require('../internals/is-symbol');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar thisNumberValue = require('../internals/this-number-value');\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\nvar TypeError = global.TypeError;\nvar arraySlice = uncurryThis(''.slice);\nvar charCodeAt = uncurryThis(''.charCodeAt);\n\n// `ToNumeric` abstract operation\n// https://tc39.es/ecma262/#sec-tonumeric\nvar toNumeric = function (value) {\n  var primValue = toPrimitive(value, 'number');\n  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);\n};\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = charCodeAt(it, 0);\n    if (first === 43 || first === 45) {\n      third = charCodeAt(it, 2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (charCodeAt(it, 1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = arraySlice(it, 2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = charCodeAt(digits, index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));\n    var dummy = this;\n    // check on 1..constructor(foo) case\n    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })\n      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  defineBuiltIn(global, NUMBER, NumberWrapper, { constructor: true });\n}\n"],
  "mappings": "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",
  "names": ["DESCRIPTORS", "global", "uncurryThis", "isForced", "defineBuiltIn", "hasOwn", "inheritIfRequired", "isPrototypeOf", "isSymbol", "toPrimitive", "fails", "getOwnPropertyNames", "getOwnPropertyDescriptor", "defineProperty", "thisNumberValue", "trim", "NUMBER", "NativeNumber", "NumberPrototype", "TypeError", "arraySlice", "charCodeAt", "toNumeric", "toNumber", "NumberWrapper", "keys", "j", "key", "require", "f", "prototype", "slice", "value", "primValue", "argument", "it", "first", "third", "radix", "maxCode", "digits", "length", "index", "code", "NaN", "parseInt", "Number", "n", "arguments", "dummy", "Object", "split", "constructor"]
}
